"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)


    "get all LabTests."
    labTests: [LabTests!]! @all @guard

    "get all UserTests."
    userTests: [UserTests!]! @all @guard

}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "The username of the user."
    username: String

    "The user test of the user."
    userTests: [UserTests!]! @hasMany(relation: "userTests")

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type UserTests {
    id: ID!
    user_id: User! @belongsTo(relation: "user")
    labTests: LabTests! @hasMany

}

type LabTests {
    id: ID!
    name: String!
    category: String!
    created_at: DateTime!
    updated_at: DateTime!
}

type Mutation {
    createUserTest(
        labTests_id: Int!
            @rules(apply: ["exists:lab_tests,id", "unique:user_tests,labTests_id"])
    ): UserTests @field(resolver: "UserTestMutation") @guard

    login(email: String!, password: String!): String
        @field(resolver: "LoginMutation")
}
